# import streamlit as st
# import requests
# import datetime

# BASE_URL = "http://localhost:8000" 

# st.set_page_config(
#     page_title="🌍 Travel Planner Agentic Application",
#     page_icon="🌍",
#     layout="centered",
#     initial_sidebar_state="expanded",
# )

# st.title("🌍 Travel Planner Agentic Application")

# if "messages" not in st.session_state:
#     st.session_state.messages = []

# st.header("How can I help you in planning a trip? Let me know where do you want to visit.")

# with st.form(key="query_form", clear_on_submit=True):
#     user_input = st.text_input("User Input", placeholder="e.g. Plan a trip to Goa for 5 days")
#     submit_button = st.form_submit_button("Send")
#     toggle = st.toggle('Budget Friendly Trip', value=False)

# st.write("---")

# if submit_button and user_input.strip():
#     try:
#         # # Show user message
#         # Show thinking spinner while backend processes
#         with st.spinner("Bot is thinking..."):
#             payload = {"query": user_input}
#             response = requests.post(f"{BASE_URL}/query", json=payload)

#         if response.status_code == 200:
#             answer = response.json().get("answer", "No answer returned.")
#             markdown_content = f"""# 🌍 AI Travel Plan

#             # **Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
#             # **Created by:** Atriyo's Travel Agent

#             ---

#             {answer}

#             ---

#             *This travel plan was generated by AI. Please verify all information, especially prices, operating hours, and travel requirements before your trip.*
#             """
#             st.markdown(markdown_content)
#         else:
#             st.error(" Bot failed to respond: " + response.text)

#     except Exception as e:
#         st.error(f"The response failed due to {e}")
        

import streamlit as st
import requests
import datetime

BASE_URL = "http://localhost:8000" 

st.set_page_config(
    page_title="🌍 Travel Planner Agentic Application",
    page_icon="🌍",
    layout="centered",
    initial_sidebar_state="expanded",
)

st.title("🌍 Travel Planner Agentic Application")

if "messages" not in st.session_state:
    st.session_state.messages = []

st.header("How can I help you in planning a trip? Let me know where do you want to visit.")
toggle = st.toggle('Budget Friendly Trip')

with st.form(key="query_form", clear_on_submit=True):
    destination = st.text_input("Destination", placeholder="e.g. Where do you want to go?")
    boarding = st.text_input("Boarding", placeholder="e.g. Your City name?")
    number_days = st.text_input("Days", placeholder="e.g. Trip for how many days?")
    number_adults = st.text_input("Adults", placeholder="e.g. Number of persons?")
    number_children = st.text_input("Children", placeholder="e.g. Number of childern?")
    boarding_date = st.date_input("Boarding Date", min_value=datetime.date.today())
    
    budget = None
    if toggle:
        budget = st.text_input("Budget", placeholder="e.g. Budget for the trip?")
    else:
        st.warning("Please enter a budget for the trip.")
        
    if budget:
        st.success("You have selected a budget-friendly trip!")
        
    submit_button = st.form_submit_button("Send")

st.write("---")

if submit_button and destination.strip() and boarding.strip() and number_adults.strip() and number_children.strip() and boarding_date and budget.strip():
    query = f"Plan a 15-day trip to {destination} for {number_adults} adults and {number_children} child, starting from {boarding} on {boarding_date}, and the total budget for this trip is {budget}"
    try:
        # # Show user message
        # Show thinking spinner while backend processes
        with st.spinner("Bot is thinking..."):
            payload = {"query": query}
            response = requests.post(f"{BASE_URL}/query", json=payload)

        if response.status_code == 200:
            answer = response.json().get("answer", "No answer returned.")
            markdown_content = f"""# 🌍 AI Travel Plan

            # **Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
            # **Created by:** Atriyo's Travel Agent

            ---

            {answer}

            ---

            *This travel plan was generated by AI. Please verify all information, especially prices, operating hours, and travel requirements before your trip.*
            """
            st.markdown(markdown_content)
        else:
            st.error(" Bot failed to respond: " + response.text)

    except Exception as e:
        st.error(f"The response failed due to {e}")
        
